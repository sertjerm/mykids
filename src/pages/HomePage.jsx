import React, { useState, useEffect } from 'react';
import { CheckCircle, XCircle, RotateCcw, Users, Star, Settings, Plus, Minus } from 'lucide-react';

// Default configuration - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
const DEFAULT_CONFIG = {
  children: [
    {
      id: 'child1',
      name: '‡∏ô‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡∏ü‡∏≤',
      age: 11,
      gender: 'female', // female, male
      emoji: 'üëß',
      bgColor: '#fecaca', // red-200
    },
    {
      id: 'child2', 
      name: '‡∏ô‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡∏ü‡∏≠‡∏á',
      age: 10,
      gender: 'male',
      emoji: 'üë¶',
      bgColor: '#bfdbfe', // blue-200
    }
  ],
  behaviors: [
    { id: 'b1', name: 'ü¶∑ ‡πÅ‡∏õ‡∏£‡∏á‡∏ü‡∏±‡∏ô', points: 3, color: '#bbf7d0' }, // green-200
    { id: 'b2', name: 'üß∏ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô', points: 2, color: '#bfdbfe' }, // blue-200  
    { id: 'b3', name: 'üìö ‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠', points: 5, color: '#c7d2fe' }, // indigo-200
    { id: 'b4', name: 'ü•ó ‡∏ó‡∏≤‡∏ô‡∏ú‡∏±‡∏Å', points: 4, color: '#a7f3d0' }, // emerald-200
    { id: 'b5', name: 'üìù ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô', points: 8, color: '#fed7aa' }, // orange-200
    { id: 'b6', name: 'üöø ‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥', points: 3, color: '#e0e7ff' }, // indigo-100
    { id: 'b7', name: 'üß∫ ‡∏ä‡πà‡∏ß‡∏¢‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤', points: 6, color: '#fef3c7' }, // yellow-200
  ],
  badBehaviors: [
    { id: 'bb1', name: 'üò§ ‡∏û‡∏π‡∏î‡∏´‡∏¢‡∏≤‡∏ö', penalty: -3, color: '#fecaca' }, // red-200
    { id: 'bb2', name: 'ü§• ‡πÇ‡∏Å‡∏´‡∏Å', penalty: -5, color: '#f3e8ff' }, // purple-200
    { id: 'bb3', name: 'üò≠ ‡∏á‡∏≠‡πÅ‡∏á', penalty: -2, color: '#fed7aa' }, // orange-200
    { id: 'bb4', name: 'üì± ‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô', penalty: -4, color: '#fde68a' }, // yellow-200
    { id: 'bb5', name: 'ü§ú ‡∏ó‡∏≥‡∏£‡πâ‡∏≤‡∏¢‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á', penalty: -8, color: '#f87171' }, // red-400
    { id: 'bb6', name: 'üö´ ‡πÑ‡∏°‡πà‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á', penalty: -6, color: '#a78bfa' }, // violet-400
  ],
  rewards: [
    { id: 'r1', name: 'üç¶ ‡πÑ‡∏≠‡∏®‡∏Å‡∏£‡∏µ‡∏°', cost: 10, icon: 'üç¶' },
    { id: 'r2', name: 'üéÆ ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° 30 ‡∏ô‡∏≤‡∏ó‡∏µ', cost: 15, icon: 'üéÆ' },
    { id: 'r3', name: 'üé¨ ‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á', cost: 20, icon: 'üé¨' },
    { id: 'r4', name: 'üçï ‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤', cost: 25, icon: 'üçï' },
    { id: 'r5', name: 'üß∏ ‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà', cost: 50, icon: 'üß∏' },
    { id: 'r6', name: 'üé™ ‡πÑ‡∏õ‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•', cost: 80, icon: 'üé™' },
    { id: 'r7', name: 'üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏© 100 ‡∏ö‡∏≤‡∏ó', cost: 100, icon: 'üí∞' },
    { id: 'r8', name: 'üéÇ ‡πÄ‡∏Ñ‡πâ‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î', cost: 60, icon: 'üéÇ' },
    { id: 'r9', name: 'üèä ‡πÑ‡∏õ‡∏™‡∏ß‡∏ô‡∏ô‡πâ‡∏≥', cost: 120, icon: 'üèä' },
    { id: 'r10', name: 'üõçÔ∏è ‡πÑ‡∏õ‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á', cost: 150, icon: 'üõçÔ∏è' },
  ]
};

const HomePage = () => {
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const [children, setChildren] = useState([]);
  const [behaviors, setBehaviors] = useState([]);
  const [badBehaviors, setBadBehaviors] = useState([]);
  const [rewards, setRewards] = useState([]);
  const [selectedChild, setSelectedChild] = useState(null);
  const [showSummary, setShowSummary] = useState(false);
  const [activeTab, setActiveTab] = useState('behaviors');
  const [childrenProgress, setChildrenProgress] = useState({});
  const [childrenUsedPoints, setChildrenUsedPoints] = useState({});
  const [childrenBadBehaviorCounts, setChildrenBadBehaviorCounts] = useState({});

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  useEffect(() => {
    const loadData = () => {
      const savedChildren = JSON.parse(localStorage.getItem('children') || 'null');
      const savedBehaviors = JSON.parse(localStorage.getItem('behaviors') || 'null');
      const savedBadBehaviors = JSON.parse(localStorage.getItem('badBehaviors') || 'null');
      const savedRewards = JSON.parse(localStorage.getItem('rewards') || 'null');
      const savedProgress = JSON.parse(localStorage.getItem('childrenProgress') || '{}');
      const savedBadBehaviorCounts = JSON.parse(localStorage.getItem('childrenBadBehaviorCounts') || '{}');
      const savedUsedPoints = JSON.parse(localStorage.getItem('childrenUsedPoints') || '{}');

      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å config
      setChildren(savedChildren || DEFAULT_CONFIG.children);
      setBehaviors(savedBehaviors || DEFAULT_CONFIG.behaviors);
      setBadBehaviors(savedBadBehaviors || DEFAULT_CONFIG.badBehaviors);
      setRewards(savedRewards || DEFAULT_CONFIG.rewards);
      setChildrenProgress(savedProgress);
      setChildrenBadBehaviorCounts(savedBadBehaviorCounts);
      setChildrenUsedPoints(savedUsedPoints);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô localStorage
      if (!savedChildren) localStorage.setItem('children', JSON.stringify(DEFAULT_CONFIG.children));
      if (!savedBehaviors) localStorage.setItem('behaviors', JSON.stringify(DEFAULT_CONFIG.behaviors));
      if (!savedBadBehaviors) localStorage.setItem('badBehaviors', JSON.stringify(DEFAULT_CONFIG.badBehaviors));
      if (!savedRewards) localStorage.setItem('rewards', JSON.stringify(DEFAULT_CONFIG.rewards));

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡πá‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å
      const childrenToUse = savedChildren || DEFAULT_CONFIG.children;
      if (childrenToUse.length > 0 && !selectedChild) {
        setSelectedChild(childrenToUse[0].id);
      }
    };

    loadData();
  }, [selectedChild]);

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  useEffect(() => {
    if (Object.keys(childrenProgress).length > 0) {
      localStorage.setItem('childrenProgress', JSON.stringify(childrenProgress));
    }
  }, [childrenProgress]);

  useEffect(() => {
    if (Object.keys(childrenBadBehaviorCounts).length > 0) {
      localStorage.setItem('childrenBadBehaviorCounts', JSON.stringify(childrenBadBehaviorCounts));
    }
  }, [childrenBadBehaviorCounts]);

  useEffect(() => {
    if (Object.keys(childrenUsedPoints).length > 0) {
      localStorage.setItem('childrenUsedPoints', JSON.stringify(childrenUsedPoints));
    }
  }, [childrenUsedPoints]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
  const calculateTotalPoints = (childId) => {
    let totalPoints = 0;
    
    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô‡∏î‡∏µ
    const progress = childrenProgress[childId] || {};
    Object.entries(progress).forEach(([behaviorId, isCompleted]) => {
      if (isCompleted) {
        const behavior = behaviors.find(b => b.id === behaviorId);
        if (behavior) {
          totalPoints += behavior.points;
        }
      }
    });
    
    // ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏î‡∏µ
    const badBehaviorCounts = childrenBadBehaviorCounts[childId] || {};
    Object.entries(badBehaviorCounts).forEach(([behaviorId, count]) => {
      const behavior = badBehaviors.find(b => b.id === behaviorId);
      if (behavior && count > 0) {
        totalPoints += behavior.penalty * count; // penalty is negative
      }
    });
    
    // ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏õ
    const usedPoints = childrenUsedPoints[childId] || 0;
    totalPoints -= usedPoints;
    
    return Math.max(0, totalPoints);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏î‡∏µ
  const toggleGoodBehavior = (childId, behaviorId) => {
    setChildrenProgress(prev => {
      const childProgress = prev[childId] || {};
      const currentStatus = childProgress[behaviorId] || false;
      return {
        ...prev,
        [childId]: {
          ...childProgress,
          [behaviorId]: !currentStatus
        }
      };
    });
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏î‡∏µ
  const addBadBehavior = (childId, behaviorId) => {
    setChildrenBadBehaviorCounts(prev => {
      const childCounts = prev[childId] || {};
      const currentCount = childCounts[behaviorId] || 0;
      return {
        ...prev,
        [childId]: {
          ...childCounts,
          [behaviorId]: currentCount + 1
        }
      };
    });
  };

  const removeBadBehavior = (childId, behaviorId) => {
    setChildrenBadBehaviorCounts(prev => {
      const childCounts = prev[childId] || {};
      const currentCount = childCounts[behaviorId] || 0;
      if (currentCount <= 1) {
        const { [behaviorId]: _, ...rest } = childCounts;
        return {
          ...prev,
          [childId]: rest
        };
      }
      return {
        ...prev,
        [childId]: {
          ...childCounts,
          [behaviorId]: currentCount - 1
        }
      };
    });
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
  const redeemReward = (childId, rewardId) => {
    const reward = rewards.find(r => r.id === rewardId);
    const currentPoints = calculateTotalPoints(childId);
    
    if (!reward || currentPoints < reward.cost) {
      alert('‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ô‡∏µ‡πâ!');
      return;
    }

    if (!confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ ${reward.cost} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏Å ${reward.name} ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?`)) {
      return;
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ
    setChildrenUsedPoints(prev => ({
      ...prev,
      [childId]: (prev[childId] || 0) + reward.cost
    }));

    alert(`üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${reward.name} ‡πÅ‡∏•‡πâ‡∏ß!`);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ß‡∏±‡∏ô
  const resetChildDay = (childId) => {
    if (!confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°? (‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏ï‡πà‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà)')) {
      return;
    }

    setChildrenProgress(prev => ({
      ...prev,
      [childId]: {}
    }));

    setChildrenBadBehaviorCounts(prev => ({
      ...prev,
      [childId]: {}
    }));
  };

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
  const resetAllChildren = () => {
    if (!confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°? (‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏° ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà)')) {
      return;
    }

    setChildrenProgress({});
    setChildrenBadBehaviorCounts({});
  };

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà)
  const resetAllRewards = (childId) => {
    if (!confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°? (‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0)')) {
      return;
    }

    setChildrenUsedPoints(prev => ({
      ...prev,
      [childId]: 0
    }));
  };

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  const getCurrentChild = () => children.find(c => c.id === selectedChild);
  const getCurrentChildProgress = () => childrenProgress[selectedChild] || {};

  const getCompletedTasksCount = (childId) => {
    const progress = childrenProgress[childId] || {};
    return Object.values(progress).filter(Boolean).length;
  };

  const getProgressPercentage = (childId) => {
    if (behaviors.length === 0) return 0;
    const completed = getCompletedTasksCount(childId);
    return Math.round((completed / behaviors.length) * 100);
  };

  const getBadBehaviorCount = (childId, behaviorId) => {
    const counts = childrenBadBehaviorCounts[childId] || {};
    return counts[behaviorId] || 0;
  };

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
  if (children.length === 0) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-pink-100 via-purple-100 via-blue-100 to-green-100 flex items-center justify-center p-4">
        <div className="max-w-md mx-auto text-center">
          <div className="bg-white rounded-2xl shadow-lg p-8">
            <div className="text-6xl mb-4">üåà</div>
            <h1 className="text-2xl font-bold text-gray-800 mb-4">‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà MyKids!</h1>
            <p className="text-gray-600 mb-6">
              ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
            </p>
            <a
              href="/?admin" 
              className="inline-flex items-center gap-2 px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors font-medium"
            >
              <Settings size={20} />
              ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
            </a>
          </div>
        </div>
      </div>
    );
  }

  const currentChild = getCurrentChild();
  const currentProgress = getCurrentChildProgress();
  const currentPoints = selectedChild ? calculateTotalPoints(selectedChild) : 0;

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-100 via-purple-100 via-blue-100 to-green-100">
      <div className="container mx-auto p-4">
        <div className="max-w-md mx-auto">
          {/* Header */}
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-2xl font-bold text-gray-800">üåà MyKids</h1>
            <a href="/?admin" className="p-2 text-gray-600 hover:text-gray-800 transition-colors">
              <Settings size={24} />
            </a>
          </div>

          {/* Child Selector */}
          <div className="mb-6">
            <div className="flex gap-2 mb-3">
              {children.map((child) => (
                <button
                  key={child.id}
                  onClick={() => {
                    setSelectedChild(child.id);
                    setShowSummary(false);
                  }}
                  className={`flex-1 p-3 rounded-2xl transition-all transform hover:scale-[1.02] ${
                    selectedChild === child.id && !showSummary
                      ? "shadow-lg scale-[1.02]"
                      : "bg-white/50 hover:bg-white/70"
                  }`}
                  style={{
                    backgroundColor:
                      selectedChild === child.id && !showSummary
                        ? child.bgColor
                        : undefined,
                  }}
                >
                  <div className="text-center">
                    <div className="text-2xl mb-1">{child.emoji}</div>
                    <div className="text-sm font-medium text-gray-700">
                      {child.name}
                    </div>
                    <div className="text-xs text-gray-600">
                      {child.age ? `${child.age} ‡∏Ç‡∏ß‡∏ö` : ''} {child.gender === 'female' ? 'üëß' : 'üë¶'}
                    </div>
                    <div className="text-xs text-gray-600">
                      {calculateTotalPoints(child.id)} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                    </div>
                  </div>
                </button>
              ))}
              <button
                onClick={() => setShowSummary(true)}
                className={`px-4 py-3 rounded-2xl transition-all ${
                  showSummary
                    ? "bg-gradient-to-r from-pink-200 to-purple-200 shadow-lg"
                    : "bg-white/50 hover:bg-white/70"
                }`}
              >
                <Users size={20} className="text-gray-700" />
              </button>
            </div>
          </div>

          {/* Main Content */}
          {showSummary ? (
            // Family Summary
            <div className="space-y-4">
              <div className="bg-white rounded-2xl shadow-lg p-6">
                <h2 className="text-xl font-bold mb-4 flex items-center gap-2">
                  <Users size={24} />
                  ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß
                </h2>
                
                {/* Family Stats */}
                <div className="grid grid-cols-2 gap-4 mb-6">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-blue-600">
                      {children.reduce((sum, child) => sum + calculateTotalPoints(child.id), 0)}
                    </div>
                    <div className="text-sm text-gray-600">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-green-600">
                      {Math.round(
                        children.reduce((sum, child) => sum + getProgressPercentage(child.id), 0) / children.length
                      )}%
                    </div>
                    <div className="text-sm text-gray-600">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</div>
                  </div>
                </div>

                {/* Individual Progress */}
                <div className="space-y-3">
                  {children.map(child => {
                    const progress = getProgressPercentage(child.id);
                    const points = calculateTotalPoints(child.id);
                    const completed = getCompletedTasksCount(child.id);
                    
                    return (
                      <div key={child.id} className="p-3 rounded-lg border" style={{ backgroundColor: child.bgColor + '30' }}>
                        <div className="flex items-center justify-between mb-2">
                          <div className="flex items-center gap-2">
                            <span className="text-xl">{child.emoji}</span>
                            <span className="font-medium">{child.name}</span>
                          </div>
                          <span className="text-sm font-bold text-gray-600">{points} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2 mb-1">
                          <div 
                            className="bg-gradient-to-r from-green-400 to-blue-500 h-2 rounded-full transition-all duration-500" 
                            style={{ width: `${progress}%` }}
                          ></div>
                        </div>
                        <div className="text-xs text-gray-600">
                          ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: {completed}/{behaviors.length} ‡∏á‡∏≤‡∏ô ({progress}%)
                        </div>
                      </div>
                    );
                  })}
                </div>

                <button
                  onClick={resetAllChildren}
                  className="w-full mt-4 px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors flex items-center justify-center gap-2"
                >
                  <RotateCcw size={18} />
                  ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
                </button>
              </div>
            </div>
          ) : (
            // Individual Child View
            currentChild && (
              <div className="space-y-6">
                {/* Child Header */}
                <div className="bg-white rounded-2xl shadow-lg p-6" style={{ backgroundColor: currentChild.bgColor + '20' }}>
                  <div className="text-center">
                    <div className="text-4xl mb-2">{currentChild.emoji}</div>
                    <h2 className="text-2xl font-bold text-gray-800">{currentChild.name}</h2>
                    <div className="text-3xl font-bold text-purple-600 mt-2">
                      {currentPoints} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                    </div>
                    {(childrenUsedPoints[selectedChild] || 0) > 0 && (
                      <div className="text-sm text-gray-500 mt-1">
                        (‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏õ {childrenUsedPoints[selectedChild]} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
                      </div>
                    )}
                    <div className="text-sm text-gray-600 mt-1">
                      ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à: {getCompletedTasksCount(selectedChild)}/{behaviors.length} 
                      ({getProgressPercentage(selectedChild)}%)
                    </div>
                  </div>
                </div>

                {/* Tab Navigation */}
                <div className="bg-white rounded-2xl shadow-lg p-4">
                  <div className="flex gap-2 mb-4">
                    <button
                      onClick={() => setActiveTab('behaviors')}
                      className={`flex-1 px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                        activeTab === 'behaviors'
                          ? 'bg-green-100 text-green-700 shadow-md'
                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                      }`}
                    >
                      ‚úÖ ‡∏á‡∏≤‡∏ô‡∏î‡∏µ
                    </button>
                    <button
                      onClick={() => setActiveTab('badBehaviors')}
                      className={`flex-1 px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                        activeTab === 'badBehaviors'
                          ? 'bg-red-100 text-red-700 shadow-md'
                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                      }`}
                    >
                      ‚ùå ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏î‡∏µ
                    </button>
                    <button
                      onClick={() => setActiveTab('rewards')}
                      className={`flex-1 px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                        activeTab === 'rewards'
                          ? 'bg-purple-100 text-purple-700 shadow-md'
                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                      }`}
                    >
                      üéÅ ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
                    </button>
                  </div>

                  {/* Tab Content */}
                  <div className="space-y-3">
                    {/* Good Behaviors Tab */}
                    {activeTab === 'behaviors' && behaviors.length > 0 && (
                      <>
                        <div className="text-sm text-gray-600 mb-3">
                          ‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                        </div>
                        
                        {/* Group by category */}
                        {Object.entries(
                          behaviors.reduce((groups, behavior) => {
                            const category = behavior.category || 'other';
                            if (!groups[category]) groups[category] = [];
                            groups[category].push(behavior);
                            return groups;
                          }, {})
                        ).map(([category, categoryBehaviors]) => (
                          <div key={category} className="mb-4">
                            <h4 className="text-sm font-medium text-gray-700 mb-2 px-2">
                              {category === 'personal_care' ? 'üöø ‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á' :
                               category === 'household' ? 'üßπ ‡∏á‡∏≤‡∏ô‡∏ö‡πâ‡∏≤‡∏ô' :
                               category === 'education' ? 'üìö ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤' :
                               category === 'health' ? 'üèÉ ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û' :
                               category === 'social' ? 'üë• ‡∏™‡∏±‡∏á‡∏Ñ‡∏°' :
                               category === 'spiritual' ? 'üôè ‡∏à‡∏¥‡∏ï‡πÉ‡∏à' :
                               'üìã ‡∏≠‡∏∑‡πà‡∏ô‡πÜ'}
                            </h4>
                            <div className="space-y-2">
                              {categoryBehaviors.map(behavior => {
                                const isCompleted = currentProgress[behavior.id] || false;
                                return (
                                  <button
                                    key={behavior.id}
                                    onClick={() => toggleGoodBehavior(selectedChild, behavior.id)}
                                    className={`w-full p-3 rounded-xl transition-all transform hover:scale-[1.02] ${
                                      isCompleted 
                                        ? 'bg-green-100 border-2 border-green-300 shadow-md' 
                                        : 'border-2 border-gray-200 hover:border-green-300'
                                    }`}
                                    style={{ 
                                      backgroundColor: isCompleted ? behavior.color + '80' : behavior.color + '40' 
                                    }}
                                  >
                                    <div className="flex items-center justify-between">
                                      <span className="font-medium text-gray-800 text-sm">{behavior.name}</span>
                                      <div className="flex items-center gap-2">
                                        <span className="text-sm font-bold text-green-600">+{behavior.points}</span>
                                        {isCompleted && <CheckCircle size={18} className="text-green-500" />}
                                      </div>
                                    </div>
                                  </button>
                                );
                              })}
                            </div>
                          </div>
                        ))}
                      </>
                    )}

                    {/* Bad Behaviors Tab */}
                    {activeTab === 'badBehaviors' && badBehaviors.length > 0 && (
                      <>
                        <div className="text-sm text-gray-600 mb-3">
                          ‡∏Å‡∏î + ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏î‡∏µ ‡∏Å‡∏î - ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î
                        </div>
                        
                        {/* Group by severity */}
                        {Object.entries(
                          badBehaviors.reduce((groups, behavior) => {
                            const severity = behavior.severity || 'medium';
                            if (!groups[severity]) groups[severity] = [];
                            groups[severity].push(behavior);
                            return groups;
                          }, {})
                        ).map(([severity, severityBehaviors]) => (
                          <div key={severity} className="mb-4">
                            <h4 className="text-sm font-medium text-gray-700 mb-2 px-2">
                              {severity === 'low' ? 'üü¢ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏≤' :
                               severity === 'medium' ? 'üü° ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' :
                               severity === 'high' ? 'üü† ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á' :
                               'üî¥ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ß‡∏¥‡∏Å‡∏§‡∏ï'}
                            </h4>
                            <div className="space-y-2">
                              {severityBehaviors.map(behavior => {
                                const count = getBadBehaviorCount(selectedChild, behavior.id);
                                return (
                                  <div
                                    key={behavior.id}
                                    className="p-3 rounded-xl border-2 border-gray-200"
                                    style={{ backgroundColor: behavior.color + '40' }}
                                  >
                                    <div className="flex items-center justify-between">
                                      <span className="font-medium text-gray-800 text-sm">{behavior.name}</span>
                                      <div className="flex items-center gap-3">
                                        <span className="text-sm font-bold text-red-600">
                                          {behavior.penalty} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                                        </span>
                                        {count > 0 && (
                                          <span className="px-2 py-1 bg-red-100 text-red-700 rounded-full text-xs font-medium">
                                            {count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                                          </span>
                                        )}
                                        <div className="flex items-center gap-1">
                                          <button
                                            onClick={() => removeBadBehavior(selectedChild, behavior.id)}
                                            disabled={count === 0}
                                            className={`p-1 rounded ${
                                              count > 0 
                                                ? 'bg-gray-200 hover:bg-gray-300 text-gray-700' 
                                                : 'bg-gray-100 text-gray-400 cursor-not-allowed'
                                            }`}
                                          >
                                            <Minus size={14} />
                                          </button>
                                          <button
                                            onClick={() => addBadBehavior(selectedChild, behavior.id)}
                                            className="p-1 rounded bg-red-200 hover:bg-red-300 text-red-700"
                                          >
                                            <Plus size={14} />
                                          </button>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                          </div>
                        ))}
                      </>
                    )}

                    {/* Rewards Tab */}
                    {activeTab === 'rewards' && rewards.length > 0 && (
                      <>
                        <div className="text-sm text-gray-600 mb-3">
                          ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ
                        </div>
                        
                        {/* Group by category */}
                        {Object.entries(
                          rewards.reduce((groups, reward) => {
                            const category = reward.category || 'other';
                            if (!groups[category]) groups[category] = [];
                            groups[category].push(reward);
                            return groups;
                          }, {})
                        ).map(([category, categoryRewards]) => (
                          <div key={category} className="mb-4">
                            <h4 className="text-sm font-medium text-gray-700 mb-2 px-2">
                              {category === 'food' ? 'üçΩÔ∏è ‡∏≠‡∏≤‡∏´‡∏≤‡∏£' :
                               category === 'entertainment' ? 'üéÆ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á' :
                               category === 'toys' ? 'üß∏ ‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô' :
                               category === 'experience' ? 'üé™ ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå' :
                               category === 'money' ? 'üí∞ ‡πÄ‡∏á‡∏¥‡∏ô' :
                               category === 'education' ? 'üìö ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤' :
                               'üéÅ ‡∏≠‡∏∑‡πà‡∏ô‡πÜ'}
                            </h4>
                            <div className="space-y-2">
                              {categoryRewards.map(reward => {
                                const canAfford = currentPoints >= reward.cost;
                                return (
                                  <button
                                    key={reward.id}
                                    onClick={() => redeemReward(selectedChild, reward.id)}
                                    disabled={!canAfford}
                                    className={`w-full p-3 rounded-xl transition-all transform hover:scale-[1.02] ${
                                      canAfford
                                        ? 'bg-gradient-to-r from-purple-100 to-pink-100 border-2 border-purple-200 hover:border-purple-300'
                                        : 'bg-gray-100 border-2 border-gray-200 opacity-50'
                                    }`}
                                  >
                                    <div className="flex items-center justify-between">
                                      <div className="flex items-center gap-3">
                                        <span className="text-2xl">{reward.icon}</span>
                                        <div className="text-left">
                                          <div className="font-medium text-gray-700 text-sm">{reward.name}</div>
                                          {reward.description && (
                                            <div className="text-xs text-gray-600">{reward.description}</div>
                                          )}
                                        </div>
                                      </div>
                                      <div className="flex items-center gap-2">
                                        <Star className="text-yellow-400 fill-current" size={14} />
                                        <span className="font-bold text-gray-600 text-sm">{reward.cost}</span>
                                        {canAfford && (
                                          <span className="text-green-600 text-xs ml-1">‚úì</span>
                                        )}
                                      </div>
                                    </div>
                                  </button>
                                );
                              })}
                            </div>
                          </div>
                        ))}
                      </>
                    )}

                    {/* Empty State */}
                    {((activeTab === 'behaviors' && behaviors.length === 0) ||
                      (activeTab === 'badBehaviors' && badBehaviors.length === 0) ||
                      (activeTab === 'rewards' && rewards.length === 0)) && (
                      <div className="text-center py-8 text-gray-500">
                        <div className="text-4xl mb-2">ü§∑‚Äç‚ôÄÔ∏è</div>
                        <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ</p>
                        <p className="text-sm mt-1">‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà</p>
                      </div>
                    )}
                  </div>
                </div>

                {/* Actions */}
                <div className="space-y-2">
                  <button
                    onClick={() => resetChildDay(selectedChild)}
                    className="w-full px-4 py-3 bg-orange-500 text-white rounded-xl hover:bg-orange-600 transition-colors flex items-center justify-center gap-2 font-medium"
                  >
                    <RotateCcw size={18} />
                    ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
                  </button>
                  
                  {(childrenUsedPoints[selectedChild] || 0) > 0 && (
                    <button
                      onClick={() => resetAllRewards(selectedChild)}
                      className="w-full px-4 py-2 bg-purple-500 text-white rounded-xl hover:bg-purple-600 transition-colors flex items-center justify-center gap-2 text-sm"
                    >
                      <Star size={16} />
                      ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• ({childrenUsedPoints[selectedChild]} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
                    </button>
                  )}
                </div>

                {/* Progress Bar */}
                <div className="bg-white rounded-2xl shadow-lg p-6">
                  <div className="text-sm font-medium text-gray-700 mb-2">
                    ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á {currentChild.name}
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-4 mb-2">
                    <div 
                      className="bg-gradient-to-r from-pink-400 via-purple-400 via-blue-400 to-green-400 h-4 rounded-full transition-all duration-500" 
                      style={{ width: `${getProgressPercentage(selectedChild)}%` }}
                    ></div>
                  </div>
                  <div className="text-xs text-gray-600 text-center">
                    {getProgressPercentage(selectedChild)}% ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                  </div>
                </div>
              </div>
            )
          )}
        </div>
      </div>
    </div>
  );
};

export default HomePage;