import React, { useState } from "react";
import { useChildrenStore } from "../stores/childrenStore";
import Card from "../components/ui/Card";
import Button from "../components/ui/Button";
import { RAINBOW_COLORS } from '../utils/colors';
import AppLayout from "../components/layout/AppLayout";

const AdminPage = () => {
  const { childrenData } = useChildrenStore();
  const [activeTab, setActiveTab] = useState('behaviors');
  const [newItem, setNewItem] = useState({ name: '', points: 0, color: RAINBOW_COLORS.blue });
  const [isAdding, setIsAdding] = useState(false);

  // Get the first child's data to use as template since all children share the same behaviors
  const templateData = Object.values(childrenData)[0];

  return (
    <AppLayout>
    <div className="space-y-6">
      <h1 className="text-2xl font-bold mb-4">‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö</h1>
      
      {/* Tab Navigation */}
      <div className="flex gap-2 mb-6">
        {[
          { id: 'behaviors', label: '‚úÖ ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°' },
          { id: 'badBehaviors', label: '‚ö†Ô∏è ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏î‡∏µ' },
          { id: 'rewards', label: 'üéÅ ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•' }
        ].map(tab => (
          <button
            key={tab.id}
            onClick={() => setActiveTab(tab.id)}
            className={`px-4 py-2 rounded-lg transition-all ${
              activeTab === tab.id 
                ? 'bg-white shadow-md text-gray-800' 
                : 'bg-gray-100 text-gray-600'
            }`}
          >
            {tab.label}
          </button>
        ))}
      </div>

      {/* Good Behaviors Management */}
      {activeTab === 'behaviors' && (
        <Card>
          <h2 className="text-xl font-bold mb-4">‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</h2>
          <div className="space-y-3">
            <div className="bg-blue-50 p-4 rounded-lg mb-4">
              <p className="text-blue-800 text-sm">
                üí° ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß
              </p>
            </div>
            
            {/* List of behaviors */}
            <div className="space-y-2">
              {templateData.behaviors.map((behavior) => (
                <Card key={behavior.id} style={{ backgroundColor: behavior.color }}>
                  <div className="flex items-center justify-between">
                    <span className="text-lg font-medium">{behavior.name}</span>
                    <div className="flex items-center gap-2">
                      <span className="text-sm">+{behavior.points} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</span>
                      <Button variant="secondary" size="sm">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</Button>
                    </div>
                  </div>
                </Card>
              ))}
            </div>

            <Button 
              className="w-full"
              onClick={() => setIsAdding(true)}
            >
              + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
            </Button>
          </div>
        </Card>
      )}

      {/* Bad Behaviors Management */}
      {activeTab === 'badBehaviors' && (
        <Card>
          <h2 className="text-xl font-bold mb-4">‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏î‡∏µ</h2>
          <div className="space-y-3">
            <div className="bg-red-50 p-4 rounded-lg mb-4">
              <p className="text-red-800 text-sm">
                ‚ö†Ô∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß
              </p>
            </div>

            {/* List of bad behaviors */}
            <div className="space-y-2">
              {templateData.badBehaviors.map((behavior) => (
                <Card key={behavior.id} style={{ backgroundColor: behavior.color }}>
                  <div className="flex items-center justify-between">
                    <span className="text-lg font-medium">{behavior.name}</span>
                    <div className="flex items-center gap-2">
                      <span className="text-sm text-red-600">{behavior.penalty} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</span>
                      <Button variant="secondary" size="sm">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</Button>
                    </div>
                  </div>
                </Card>
              ))}
            </div>

            <Button className="w-full">+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏î‡∏µ</Button>
          </div>
        </Card>
      )}

      {/* Rewards Management */}
      {activeTab === 'rewards' && (
        <Card>
          <h2 className="text-xl font-bold mb-4">‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•</h2>
          <div className="space-y-3">
            <div className="bg-yellow-50 p-4 rounded-lg mb-4">
              <p className="text-yellow-800 text-sm">
                üéÅ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß
              </p>
            </div>

            {/* List of rewards */}
            <div className="space-y-2">
              {[
                { id: 1, name: 'üéÆ ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° 30 ‡∏ô‡∏≤‡∏ó‡∏µ', cost: 20 },
                { id: 2, name: 'üç¶ ‡πÑ‡∏≠‡∏®‡∏Å‡∏£‡∏µ‡∏°', cost: 15 },
                { id: 3, name: 'üé¨ ‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á', cost: 25 },
                { id: 4, name: 'üé™ ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏™‡∏ß‡∏ô‡∏™‡∏ô‡∏∏‡∏Å', cost: 50 }
              ].map((reward) => (
                <Card key={reward.id}>
                  <div className="flex items-center justify-between">
                    <span className="text-lg font-medium">{reward.name}</span>
                    <div className="flex items-center gap-2">
                      <span className="text-sm">{reward.cost} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</span>
                      <Button variant="secondary" size="sm">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</Button>
                    </div>
                  </div>
                </Card>
              ))}
            </div>

            <Button className="w-full">+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏´‡∏°‡πà</Button>
          </div>
        </Card>
      )}

      {/* Add/Edit Modal */}
      {isAdding && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
          <Card className="w-full max-w-md mx-4">
            <h3 className="text-xl font-bold mb-4">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-1">‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô</label>
                <input 
                  type="text"
                  className="w-full p-2 border rounded-lg"
                  value={newItem.name}
                  onChange={e => setNewItem({...newItem, name: e.target.value})}
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</label>
                <input 
                  type="number"
                  className="w-full p-2 border rounded-lg"
                  value={newItem.points}
                  onChange={e => setNewItem({...newItem, points: parseInt(e.target.value)})}
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">‡∏™‡∏µ</label>
                <div className="grid grid-cols-4 gap-2">
                  {Object.entries(RAINBOW_COLORS).map(([key, color]) => (
                    <button
                      key={key}
                      className={`w-full h-8 rounded-lg ${
                        newItem.color === color ? 'ring-2 ring-blue-500' : ''
                      }`}
                      style={{ backgroundColor: color }}
                      onClick={() => setNewItem({...newItem, color})}
                    />
                  ))}
                </div>
              </div>
              <div className="flex gap-2">
                <Button variant="secondary" className="flex-1" onClick={() => setIsAdding(false)}>
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </Button>
                <Button className="flex-1">
                  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                </Button>
              </div>
            </div>
          </Card>
        </div>
      )}

    </div>
    </AppLayout>
  );
};

export default AdminPage;
